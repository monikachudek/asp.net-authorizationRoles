@page
@model authorizationRoles.Pages.Students.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Student</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.LastName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.FirstName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.Address)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.Address)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.City)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.City)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.State)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.State)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.Zip)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.Zip)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.Email)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.Email)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Student.Status)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Student.Status)
        </dd>
    </dl>
</div>

@if (Model.Student.Status != StudentStatus.Approved)
{
    @if ((await AuthorizationService.AuthorizeAsync(
    User, Model.Student, StudentOperations.Approve)).Succeeded)
    {
        <form style="display:inline" method="post">
            <input type="hidden" name="id" value="@Model.Student.StudentId" />
            <input type="hidden" name="status" value="@StudentStatus.Approved" />
            <button type="submit" class="btn btn-xs btn-success">Approve</button>
        </form>
    }
}

@if (Model.Student.Status != StudentStatus.Rejected)
{
    @if ((await AuthorizationService.AuthorizeAsync(
    User, Model.Student, StudentOperations.Reject)).Succeeded)
    {
        <form style="display:inline" method="post">
            <input type="hidden" name="id" value="@Model.Student.StudentId" />
            <input type="hidden" name="status" value="@StudentStatus.Rejected" />
            <button type="submit" class="btn btn-xs btn-danger">Reject</button>
        </form>
    }
}


    @if ((await AuthorizationService.AuthorizeAsync(
    User, Model.Student, StudentOperations.Update)).Succeeded)
    {
        <a  class="btn btn-xs btn-light" asp-page="./Edit" asp-route-id="@Model.Student.StudentId">Edit</a>
    }

<div>
    <a asp-page="./Index">Back to List</a>
</div>
