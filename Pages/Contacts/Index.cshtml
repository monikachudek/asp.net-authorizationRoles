@page
@model IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>

<form method="get" asp-page="./Index">
    <div class="form-action no-color">
        <p>
            Find by name:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" />
        <p>
            <a asp-page="./Index">Back to full list</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Contacts[0].LastName)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Contacts[0].FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Contacts[0].Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Contacts[0].City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Contacts[0].State)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Contacts[0].Zip)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Contacts[0].Email)
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.StatusSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Contacts[0].Status)
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Contacts)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.State)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Zip)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @if ((await AuthorizationService.AuthorizeAsync(
               User, item,
               ContactOperations.Update)).Succeeded)
                {
                    <a asp-page="./Edit" asp-route-id="@item.ContactId">Edit</a>
                    <text> | </text>
                }

                <a asp-page="./Details" asp-route-id="@item.ContactId">Details</a>

                @if ((await AuthorizationService.AuthorizeAsync(
               User, item,
               ContactOperations.Delete)).Succeeded)
                {
                    <text> | </text>
                    <a asp-page="./Delete" asp-route-id="@item.ContactId">Delete</a>
                }
            </td>
        </tr>
        }
    </tbody>
</table>

@{ 
    var prevDisabled = !Model.Contacts.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Contacts.HasNextPage ? "disabled" : "";
}

<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Contacts.PageIndex-1)"
   asp-route-CurrentFilter="@Model.CurrentFilter"
   class="btn btn-primary @prevDisabled">Previous</a>

<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Contacts.PageIndex+1)"
   asp-route-CurrentFilter="@Model.CurrentFilter"
   class="btn btn-primary @nextDisabled">Next</a>